#include <linux/module.h>	/* Needed by all modules */
#include <linux/kernel.h>	/* Needed for KERN_INFO */
#include <linux/gfp.h>
#include <linux/kthread.h>
#include <linux/mm.h>
MODULE_LICENSE("GPL");

struct task_struct *task[2];
struct page *page;

static int numa_perf_thread (void * data)
{
	u64 t0_ns, delta_ns;
	u8 id;
	int i = 0;
	printk("Thread id = %d, data = %d, numa_mem_id() = %d\n",id = get_cpu(),*((u32 *)data), numa_mem_id());
	put_cpu();
	volatile u32 *ptr = data;
	
	local_irq_disable();
	t0_ns = ktime_get_ns();
	for (; i< 10000000; i++) {
		//(*ptr)++;
    
    /*    
[  +2.356063] ALIGN(65,8) = 72, page_to_nid(page) = 1, numa_mem_id() = 1
[  +0.000036] Thread id = 2, data = 0, numa_mem_id() = 0
[  +0.000018] Thread id = 3, data = 7449, numa_mem_id() = 1
[  +0.026476] numa_mem_id() = 0, delta_ns 26492167
[  +0.000003] Thread 2, total count = 9572581 ended
[  +0.000914] numa_mem_id() = 1, delta_ns 27389115
[  +0.000002] Thread 3, total count = 10009146 ended
    
    */
    
		atomic_inc((atomic_t *)ptr);
    /*
[  +2.261276] ALIGN(65,8) = 72, page_to_nid(page) = 1, numa_mem_id() = 1
[  +0.000039] Thread id = 2, data = 0, numa_mem_id() = 0
[  +0.000016] Thread id = 3, data = 2201, numa_mem_id() = 1
[  +0.223885] numa_mem_id() = 0, delta_ns 223898068
[  +0.000002] Thread 2, total count = 13415950 ended
[  +0.044171] numa_mem_id() = 1, delta_ns 268053633
[  +0.000003] Thread 3, total count = 20000000 ended    
    */
	}
	local_irq_enable();
	
	delta_ns = ktime_get_ns() - t0_ns;
	
	printk("numa_mem_id() = %d, delta_ns %lld\n",numa_mem_id(),delta_ns);
	

	printk("Thread %d, total count = %d ended\n",id,*ptr);
	return 0;
}

int init_module(void) 
{
	u16 i = 0;
	u32 *ptr;
	
	page =  alloc_pages_node(NUMA_NO_NODE, GFP_KERNEL, 0);
	if (!page) {
		pr_err("Page allocation: failed, returning\n");
		return -1;
	}
	
	printk("ALIGN(65,8) = %d, page_to_nid(page) = %d, numa_mem_id() = %d\n",ALIGN(65,8), page_to_nid(page), numa_mem_id());
	
	ptr = page_address(page);
	
	*ptr = 0;
	
	for (; i<2; i++) {
	task[i] = kthread_create(numa_perf_thread, ptr , "NUME NODE PERF THREAD");
		if(task[i])
		{
			kthread_bind(task[i],i+2); /*binding i + 2 cpu*/
			wake_up_process(task[i]);
		}
		else {
			printk("Thread Creation failed: exiting\n");
			return -1;
		}
	}
	
	return 0;
}


void cleanup_module(void)
{
	int i = 0;
#if 0	
	for (; i<2; i++){
		kthread_stop(task[i]);	
	}	
#endif
	__free_pages(page,0);
	
	printk(KERN_INFO "Module unloaded\n");
}
