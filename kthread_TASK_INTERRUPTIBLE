#include <linux/module.h>	/* Needed by all modules */
#include <linux/kernel.h>	/* Needed for KERN_INFO */
#include <linux/gfp.h>
#include <linux/kthread.h>
#include <linux/mm.h>
#include <linux/pci.h>
#include <linux/dma-mapping.h>
#include <linux/delay.h>
MODULE_LICENSE("GPL");

#define BUFFER_SIZE 32768

struct task_struct *task[2];
u32 *ptr_nocache;
dma_addr_t dma_addr;
struct pci_dev *pdev = NULL;

static int numa_perf_thread (void * data)
{
	u64 t0_ns, delta_ns;
	u8 id;
	volatile int i = 0,j;
	printk("Thread id = %d, data = %d, numa_mem_id() = %d\n",id = get_cpu(),*((u32 *)data), numa_mem_id());
	put_cpu();
	volatile u32 *ptr = data;
	
	set_current_state(TASK_INTERRUPTIBLE);
	
	while (!kthread_should_stop ()) {
	
		local_irq_disable();
		t0_ns = ktime_get_ns();
		for (j = 0; j < 100000; j++) {
		
			for (; i < BUFFER_SIZE/2; i+=4) {
				(*ptr)++;
				ptr++;
			}
			i = 0;
			ptr = data;
		}
		local_irq_enable();
		
		delta_ns = ktime_get_ns() - t0_ns;
		
		printk("numa_mem_id() = %d, delta_ns %lld\n",numa_mem_id(),delta_ns);
		

		printk("Thread %d, total count = %d ended\n",id,*ptr);
	
		
		schedule();
		
		//set_current_state(TASK_INTERRUPTIBLE);
		
		printk("Exiting schedule\n");
	
	}
	
	return 0;
}

int init_module(void) 
{
	u16 i = 0;
	struct page *page_nocache;
	
	
	pdev = pci_get_device(0x10EE,0x903f,NULL);
	if (!pdev) {
		pr_err("pdev NULL\n");
		return -1;	
	}
	
	ptr_nocache = dma_alloc_coherent (&pdev->dev, BUFFER_SIZE, &dma_addr, GFP_KERNEL);
	if (!ptr_nocache) {
		pr_err("dma_alloc_coherent failed\n");
		return -1;
	}
	
	page_nocache = virt_to_page(ptr_nocache);
	
	printk("page_nocache: page_to_nid  = %d\n",page_to_nid(page_nocache));
	
	*ptr_nocache = 15;
	*(ptr_nocache + BUFFER_SIZE/8) = 25;
	
	for (; i<2; i++) {
	task[i] = kthread_create(numa_perf_thread, ptr_nocache + i* BUFFER_SIZE/(4*2) , "NUME NODE PERF THREAD");
		if(task[i])
		{
			kthread_bind(task[i],i+2); /*binding i + 2 cpu*/
			wake_up_process(task[i]);
		}
		else {
			printk("Thread Creation failed: exiting\n");
			return -1;
		}
	}
	
	return 0;
}


void cleanup_module(void)
{
	int i = 0;

	wake_up_process(task[0]);
	wake_up_process(task[1]);
	//dma_free_coherent(&pdev->dev, BUFFER_SIZE, ptr_nocache, dma_addr);
	
	msleep(10000);
	
#if 1
	for (; i<2; i++){
		//wake_up_process(task[i]);
		kthread_stop(task[i]);	
	}	
#endif
	
	printk(KERN_INFO "Module unloaded\n");
}
